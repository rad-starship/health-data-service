:: ##############################################
::         Spring Boot Kubernetes
::         -----------------------
:: (1) Create a Spring Boot Application
:: (2) Containerize the Application
:: (3) Deploy the application on Kubernetes
:: ##############################################

:: ######################################
:: (1) Create a Spring Boot Application
:: (1a) Compile and Build application
echo off
set JAVA_HOME=C:\Program Files\Java\jdk1.8.0_102
mvn clean install package
:: (1b) Test application is running (without docker container)
java -jar target/health-data-service-0.0.1-SNAPSHOT.jar

:: ######################################
:: Test Docker Engine is up and running
:: ######################################
docker system df
::TYPE                TOTAL               ACTIVE              SIZE                RECLAIMABLE
::Images              55                  11                  7.217GB             6.511GB (90%)
::Containers          24                  23                  7.579kB             0B (0%)
::Local Volumes       26                  0                   590MB               590MB (100%)
::Build Cache         0                   0                   0B                  0B

:: ######################################
:: (2) Containerize the Application
:: (2a) First create a Dockerfile

:: (2b) Docker Build
:: Build new image from Dockerfile with tag with tag “health-data-service:1.0” in the current directory
docker image ls
docker build --file health-data-service-dockerfile -t rad-starship/health-data-service:1.0 .

:: (2c) You can run the container locally:
docker container ls
docker container run --publish 8082:8082 --detach --name health-data-service rad-starship/health-data-service:1.0

:: (2d) and check that it works in another terminal:
C:\docker\curl-7.68.0\bin\curl.exe -i http://localhost:8082/users
 
:: (2e) Finish off by killing the container.
docker container ls -a
::CONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS                     PORTS                              NAMES
::423cbb78ff42        rad-starship/health-data-service     "java -cp app:app/li…"   4 weeks ago         Exited (143) 4 weeks ago                                      brave_pike
docker container stop 423cbb78ff42
docker container rm -f 423cbb78ff42

:: (2f) If you need - push the image to Dockerhub (you must be authenticated)
:: Docker hub is the most popular public images registry. 
:: In real life the image needs to be pushed to Dockerhub (or some other accessible repository)
:: because Kubernetes pulls the image from inside its Kubelets (nodes), 
:: which are not in general connected to the local docker daemon.
docker login
docker tag rad-starship/health-data-service:1.0 razoz/health-data-service:1.0
docker push razoz/health-data-service:1.0 

:: ######################################
:: (3) deploying the application on Kubernetes

:: (3a) Verify you can run kubectl commands from the shell:
kubectl cluster-info
kubectl get all

:: (3b) ask kubectl to generate basic deployment YAML
kubectl create deployment health-data-service --image=razoz/health-data-service:1.0 --dry-run -o=yaml > health-data-service-deployment.yaml
echo --- >> nms-access-service-deployment.yaml
kubectl create service clusterip health-data-service --tcp=8082:8082 --dry-run -o=yaml >> health-data-service-deployment.yaml

:: (3d) You can take the YAML generated above and edit it if you like, or you can just apply it:
kubectl apply -f health-data-service-deployment.yaml

:: (4d) Check that the application is running
:: Keep doing kubectl get all until the nms-access-service pod shows its status as "Running".
kubectl get all

:: (4e) Now you need to be able to connect to the application, 
:: which you have exposed as a Service in Kubernetes. 
:: One way to do that, which works great at development time, is to create an SSH tunnel:
kubectl port-forward svc/health-data-service 8082:8082
:: then you can verify that the app is running in another terminal:
C:\docker\curl-7.68.0\bin\curl.exe -i http://localhost:8082/users

kubectl delete deployment health-data-service
kubectl delete service health-data-service